Important note on why NoArgsConstructor is needed if we add AllArgsConstructor:
https://stackoverflow.com/questions/68314072/why-to-use-allargsconstructor-and-noargsconstructor-together-over-an-entity#:~:text=Conclusion%3A,default%20constructor%20with%20no%20parameters
----------------------------------------------------------
Why we should not use Entity class directly as RequestBody in public facing method params:
We don't use @RequestBody User user directly here because of following reasons:
authService.registerUser(user)
1. If your User entity has extra fields like id, roles, or createdAt, users might send unexpected data.
   Ex - End user sends data with role = Admin, which was not intended but now saved in DB
2. If we modify the User entity (e.g., add a new column), it could break our API because our API directly depends on the entity.
3. Without proper validation, a user might send incomplete data, and our application might crash.
Better option is to use DTO which contains the fields we need in order to register our user
----------------------------------------------------------
We will need to define PasswordEncoder somewhere as a Bean for Spring to recognize and use it.
----------------------------------------------------------
We can extend JPARepository into a repository interface (UserRepository) and the naming conventions are here:
https://docs.spring.io/spring-data/jpa/reference/jpa/query-methods.html
----------------------------------------------------------
